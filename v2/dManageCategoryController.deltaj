//#ifdef manageCategory
delta dManageCategoryController {
	adds {
		package br.unb.cic.reminders.controller;

		import android.content.Context;
		import br.unb.cic.reminders.model.Category;
		import br.unb.cic.reminders.model.Reminder;

		public class CategoryFilter extends ReminderFilter {

			private Category category;

			public CategoryFilter(Category category, Context context) {
				super(context);
				this.category = category;
			}

			@Override
			protected boolean selectReminder(Reminder r) {
				return r.getCategory().getName().equals(category.getName());
			}

			public Category getCategory() {
				return category;
			}

			@Override
			public String getName() {
				return category.getName();
			}
		}
	}
	
	//#ifdef manageReminder
	modifies br.unb.cic.reminders.controller.Controller {
		adds public void deleteReminderByCategory(Category category) throws
		DBException {
			try {
				List<Reminder> allReminders =
				DBFactory.factory(context).createReminderDAO().listRemindersByCategory(category);
				for(Reminder reminder : allReminders) {
					DBFactory.factory(context).createReminderDAO().deleteReminder(reminder);
				}
			}
			catch(DBException e) {
				throw e;
			}
		}
		adds public void addCategory(Category category) throws Exception {
			try {
				DBFactory.factory(context).createCategoryDAO().saveCategory(category);
			}
			catch(DBException e) {
				throw e;
			}
		}
		adds public void updateCategory(Category category) throws DBException {
			try {
				DBFactory.factory(context).createCategoryDAO().updateCategory(category);
			}
			catch(DBException e) {
				throw e;
			}
		}
		adds public void deleteCategory(Category category) throws DBException {
			try {
				DBFactory.factory(context).createCategoryDAO().deleteCategory(category);
			}
			catch(DBException e) {
				throw e;
			}
		}
	}
	//#endif
}
//#endif
