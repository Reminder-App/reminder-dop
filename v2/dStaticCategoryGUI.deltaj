//#ifdef staticCategory
delta dStaticCategoryGUI {
	adds {
		package br.unb.cic.reminders.view;

		import java.util.ArrayList;
		import java.util.List;

		import android.app.Fragment;
		import android.os.Bundle;
		import android.util.Log;
		import android.view.LayoutInflater;
		import android.view.View;
		import android.view.ViewGroup;
		import android.widget.AdapterView;
		import android.widget.AdapterView.OnItemClickListener;
		import android.widget.Button;
		import android.widget.ListView;
		import br.unb.cic.framework.persistence.DBException;
		import br.unb.cic.reminders.controller.AllRemindersFilter;
		import br.unb.cic.reminders.controller.CategoryFilter;
		import br.unb.cic.reminders.controller.Controller;
		import br.unb.cic.reminders.controller.ReminderFilter;
		import br.unb.cic.reminders.model.Category;
		import br.unb.cic.reminders2.R;

		public class FilterListFragment extends Fragment implements
		OnItemClickListener {

			private static final String CURRENT_FILTER_KEY = "current_filter";

			private static String TAG = "filter fragment list";

			private int currentFilterIndex;

			private List<FiltersListChangeListener> listeners;

			private FiltersListChangeListener filtersChangeListener;

			private int currentFilterId;

			private ReminderFilterArrayAdapter adapter;
			private View view;

			private Button btAddCategory;
			private ListView lvFilters;

			@Override
			public void onActivityCreated(Bundle savedInstanceState) {
				super.onActivityCreated(savedInstanceState);

				if(savedInstanceState != null) {
					currentFilterIndex = savedInstanceState.getInt(CURRENT_FILTER_KEY);
				}

				currentFilterId = 0;

				adapter = null;
			}

			@Override
			public View onCreateView(LayoutInflater inflater, ViewGroup container,
				Bundle savedInstanceState) {
				view = inflater.inflate(R.layout.categories_list_fragment, container,
					false);
				createUI();
				return view;
			}

			@Override
			public void onResume() {
				super.onResume();
				updateListView();
			}

			public void addListener(FiltersListChangeListener filter) {
				if(listeners == null) listeners = new
				ArrayList<FiltersListChangeListener>();
				listeners.add(filter);
			}

			public void notifyListeners(ReminderFilter filter) {
				for(FiltersListChangeListener c : listeners) {
					c.onSelectedFilterChanged(filter);
				}
			}

			private void createUI() {
				lvFilters = ( ListView ) view.findViewById(R.id.listCategories);
				lvFilters.setOnItemClickListener(this);
				registerForContextMenu(lvFilters);
				updateListView();
			}

			private void updateListView() {

				List<ReminderFilter> filters = new ArrayList<ReminderFilter>();

				AllRemindersFilter allRemindersFilter = new
				AllRemindersFilter(getActivity());
				filters.add(allRemindersFilter);

				List<Category> categories = new ArrayList<Category>();
				try {
					categories =
					Controller.instance(getActivity().getApplicationContext()).listCategories();
					notifyListeners(null);
				}
				catch(DBException e) {
					Log.e(CURRENT_FILTER_KEY, "STORAGE_SERVICE error. Message: " +
						e.getMessage());
					e.printStackTrace();
				}
				catch(Exception e) {
					Log.e(CURRENT_FILTER_KEY, "STORAGE_SERVICE error. Message: " +
						e.getMessage());
					e.printStackTrace();
				}

				ReminderFilter filter;
				for(Category c : categories) {
					filter = new CategoryFilter(c, getActivity());
					filters.add(filter);
				}

				adapter = new
				ReminderFilterArrayAdapter(getActivity().getApplicationContext(), filters);

				lvFilters.setAdapter(adapter);
			}

			public void onItemClick(AdapterView<? extends Object> adapterView, View
				view, int position, long id) {
				notifyListeners(adapter.getItem(position));

			}

			public void onNothingSelected(AdapterView<? extends Object> arg0) {

			}

		}
	}

	adds {
		package br.unb.cic.reminders.view;

		import java.util.List;

		import android.content.Context;
		import android.view.LayoutInflater;
		import android.view.View;
		import android.view.ViewGroup;
		import android.widget.ArrayAdapter;
		import android.widget.LinearLayout;
		import android.widget.TextView;
		import br.unb.cic.reminders.model.Category;
		import br.unb.cic.reminders2.R;

		public class CategoryArrayAdapter extends ArrayAdapter<Category> {

			private Context context;

			public CategoryArrayAdapter(Context context, List<Category> objects) {
				super(context, R.layout.category_row, objects);
				this.context = context;
			}

			@Override
			public View getView(int position, View convertView, ViewGroup parent) {
				LinearLayout categoryRow;

				if(convertView == null) {
					categoryRow = new LinearLayout(getContext());
					String inflater = Context.LAYOUT_INFLATER_SERVICE;
					LayoutInflater vi;
					vi = ( LayoutInflater ) getContext().getSystemService(inflater);
					vi.inflate(R.layout.category_row, categoryRow, true);
				}
				else {
					categoryRow = ( LinearLayout ) convertView;
				}

				TextView tvCategory = ( TextView )
				categoryRow.findViewById(R.id.row_categoryName);

				tvCategory.setText(getItem(position).getName());

				return categoryRow;
			}

		}
	}

	//#ifdef edit
	modifies br.unb.cic.reminders.view.EditReminderActivity {
		adds import br.unb.cic.reminders.model.Category;
		adds import java.util.List;

		modifies setInitializeValues(Intent intent) {
			original(intent);

			String categoryId = intent.getStringExtra("category_id");
			String categoryName = intent.getStringExtra("category_name");

			Category category = new Category();
			category.setId(Long.parseLong(categoryId));
			category.setName(categoryName);

			try {
				spinnerCategory.setSelection(categoryToIndex(category));
			}
			catch(Exception e) {
				e.printStackTrace();
			}
		}

		modifies persistValues(Reminder reminder) {
			Category category;
			try {
				category = findCategory(reminder.getCategory());
				reminder.setCategory(category);
			}
			catch(Exception e) {
				e.printStackTrace();
			}
			original(reminder);
		}
		
		adds private Category findCategory(Category category) throws Exception {
			List<Category> categories = Controller.instance(getApplicationContext()).listCategories();
			for (Category c : categories) {
				if (c.getName().equals(category.getName()))
					return c;
			}
			return null;
		}

		adds private int categoryToIndex(Category category) throws Exception {
			List<Category> categories =
			Controller.instance(getApplicationContext()).listCategories();
			int i = 0;
			for(Category c : categories) {
				if(c.getName().equals(category.getName())) {
					return i;
				}
				i ++;
			}
			return 0;
		}
	}
	//#endif

	//#ifdef create
	modifies br.unb.cic.reminders.view.AddReminderActivity {
		adds import br.unb.cic.reminders.model.Category;
		adds import java.util.List;

		modifies persistValues(Reminder reminder) {
			Category category;
			try {
				category = findCategory(reminder.getCategory());
				reminder.setCategory(category);
			}
			catch(Exception e) {
				e.printStackTrace();
			}
			original(reminder);
		}

		adds private Category findCategory(Category category) throws Exception {
			List<Category> categories =
			Controller.instance(getApplicationContext()).listCategories();
			for(Category c : categories) {
				if(c.getName().equals(category.getName())) return c;
			}
			return null;
		}
	}

	modifies br.unb.cic.reminders.view.ExternalAddReminderActivity {
		adds import br.unb.cic.reminders.model.Category;
		adds import java.util.List;
		adds private Category newCategory = null;
		
		adds private void setNewCategory(Intent intent) throws Exception {
			String categoryName = intent.getStringExtra("category_name");
			List<Category> categories = Controller.instance(getApplicationContext()).listCategories();
			for (Category c : categories) {
				if (c.getName().equals(categoryName)) {
					newCategory = c;
					break;
				}
			}
		}

		modifies reminderFromIntent(Intent intent) throws Exception {
			original(intent);
			setNewCategory(intent);
			reminder.setCategory(newCategory);
		}

		modifies initialize() {
			original();

			try {
				spinnerCategory.setSelection(categoryToIndex(reminder.getCategory()));
			}
			catch(Exception e) {
				e.printStackTrace();
			}
		}

		adds @Override
		protected List<Category> getCategories() throws Exception {
			List<Category> categories = super.getCategories();
			return categories;
		}

		adds private int categoryToIndex(Category category) throws Exception {
			List<Category> categories =
			Controller.instance(getApplicationContext()).listCategories();
			int i = 0;
			for(Category c : categories) {
				if(c.getName().equals(category.getName())) {
					return i;
				}
				i ++;
			}
			return 0;
		}
	}
	//#endif

	//#ifdef gui
	modifies br.unb.cic.reminders.view.ReminderListFragment {
		modifies setIntent(Reminder reminder, Intent editIntent) {
			original(reminder, editIntent);

			editIntent.putExtra("category_name", reminder.getCategory().getName());
			editIntent.putExtra("category_id",
				Long.toString(reminder.getCategory().getId()));
		}
	}
	
	modifies br.unb.cic.reminders.view.ReminderActivity {
		adds import br.unb.cic.reminders.model.Category;
		adds import br.unb.cic.reminders.controller.Controller;
		adds protected Spinner spinnerCategory;

		modifies initializeFields() {
			original();
			try {
				spinnerCategory = getSpinnerCategory();
			}
			catch(Exception e) {
				e.printStackTrace();
			}
		}

		modifies initializeListeners() {
			original();
			addListenerToSpinnerCategory();
		}

		modifies setValuesOnReminder() {
			original();

			reminder.setCategory(( Category ) spinnerCategory.getSelectedItem());
		}

		adds private void addListenerToSpinnerCategory() {
			spinnerCategory.setOnItemSelectedListener(new OnItemSelectedListener() {
					public void onItemSelected(AdapterView<? extends Object> parent, View
						view, int pos, long id) {
					}

					public void onNothingSelected(AdapterView<? extends Object> parent) {

					}
				});
		}

		adds private Spinner getSpinnerCategory() throws Exception {
			Spinner spinner = ( Spinner ) findViewById(R.id.spinnerCategories);

			SpinnerAdapterGenerator<Category> adapterCategoryGenerator = new
			SpinnerAdapterGenerator<Category>();

			List<Category> categories = getCategories();

			ArrayAdapter<Category> adapter =
			adapterCategoryGenerator.getSpinnerAdapter(categories, this);

			spinner.setAdapter(adapter);

			return spinner;
		}

		adds protected List<Category> getCategories() throws Exception {
			return Controller.instance(getApplicationContext()).listCategories();
		}

		adds protected Spinner getSpinnerCategory(List<Category> categories) throws
		Exception {
			Spinner spinner = ( Spinner ) findViewById(R.id.spinnerCategories);

			SpinnerAdapterGenerator<Category> adapterCategoryGenerator = new
			SpinnerAdapterGenerator<Category>();

			spinner.setAdapter(adapterCategoryGenerator.getSpinnerAdapter(categories,
					this));

			return spinner;
		}
	}
	//#endif

	//#ifdef create
	modifies br.unb.cic.reminders.view.ReminderAddActivity {
		adds import br.unb.cic.reminders.model.Category;
		adds import android.widget.Spinner;
		adds import android.widget.AdapterView;
		adds import android.widget.AdapterView.OnItemSelectedListener;
		adds import java.util.List;

		adds private Category selectedCategory;
		adds private Spinner spinnerCategory;

		modifies configureActionListener() {
			original();
			addListenerToSpinnerCategory();
		}

		modifies setCreateReminder(Reminder reminder) {
			original(reminder);

			reminder.setCategory(selectedCategory);
		}

		modifies existingReminderValues(Reminder reminder, Intent intent) {
			original(reminder, intent);

			String categoryName = intent.getStringExtra("category_name");
			String categoryId = intent.getStringExtra("category_id");

			Category category = new Category();
			category.setName(categoryName);
			category.setId(Long.parseLong(categoryId));
			reminder.setCategory(category);
		}

		modifies createReminderIntent(Intent intent, Reminder reminder) {
			original(intent, reminder);

			String category = intent.getStringExtra("category");

			Category auxCategory = new Category();
			auxCategory.setName(category);
			reminder.setCategory(auxCategory);
		}

		modifies initialize(Reminder reminder) {
			try {
				edtReminder = ( EditText ) findViewById(R.id.edtReminder);
				edtDetails = ( EditText ) findViewById(R.id.edtDetails);
				spinnerCategory = getSpinnerCategory();
				if(reminder != null) {
					updateFieldsFromReminder(reminder);
				}
				btnSave = ( Button ) findViewById(R.id.btnSave);
				btnCancel = ( Button ) findViewById(R.id.btnCancel);
			}
			catch(Exception e) {
				e.printStackTrace();
			}
		}

		modifies updateFieldsFromReminder(Reminder reminder) {
			original(reminder);

			spinnerCategory.setSelection(categoryToIndex(reminder.getCategory()));
		}

		adds private void addListenerToSpinnerCategory() {
			spinnerCategory.setOnItemSelectedListener(new OnItemSelectedListener() {
					public void onItemSelected(AdapterView<? extends Object> parent, View
						view, int pos, long id) {
						selectedCategory = ( Category ) parent.getItemAtPosition(pos);
					}

					public void onNothingSelected(AdapterView<? extends Object> parent) {

					}
				});
		}

		adds private Spinner getSpinnerCategory() throws Exception {
			Spinner spinner = ( Spinner ) findViewById(R.id.spinnerCategories);

			SpinnerAdapterGenerator<Category> adapterCategoryGenerator = new
			SpinnerAdapterGenerator<Category>();

			List<Category> categories =
			Controller.instance(getApplicationContext()).listCategories();

			spinner.setAdapter(adapterCategoryGenerator.getSpinnerAdapter(categories,
					this));

			return spinner;
		}

		adds private int categoryToIndex(Category category) throws Exception {
			List<Category> categories =
			Controller.instance(getApplicationContext()).listCategories();
			int i = 0;
			for(Category c : categories) {
				if(c.getName().equals(category.getName())) {
					return i;
				}
				i ++;
			}
			return 0;
		}
	}
	//#endif

	//#ifdef gui
	modifies br.unb.cic.reminders.view.ReminderFilterArrayAdapter {
		modifies ReminderFilterArrayAdapter(Context context, List<ReminderFilter>
			objects) {
			super(context, R.layout.category_row, objects);
		}

		modifies getView(int position, View convertView, ViewGroup parent) {
			LinearLayout filterRow;

			if(convertView == null) {
				filterRow = new LinearLayout(getContext());
				String inflater = Context.LAYOUT_INFLATER_SERVICE;
				LayoutInflater vi;
				vi = ( LayoutInflater ) getContext().getSystemService(inflater);
				vi.inflate(R.layout.category_row, filterRow, true);
			}
			else {
				filterRow = ( LinearLayout ) convertView;
			}

			TextView tvFilter = ( TextView )
			filterRow.findViewById(R.id.row_categoryName);
			tvFilter.setText(getItem(position).getName());

			TextView tvNumReminders = ( TextView )
			filterRow.findViewById(R.id.row_categoryCounter);
			tvNumReminders.setText(Integer.toString(getItem(position).getNumReminders()));

			return filterRow;
		}
	}
	//#endif
}
//#endif
