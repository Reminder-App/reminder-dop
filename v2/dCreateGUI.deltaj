//#ifdef create
delta dCreateGUI {
	adds {
		package br.unb.cic.reminders.view;

		import android.app.Activity;
		import android.content.Intent;
		import android.os.Bundle;
		import android.util.Log;
		import android.view.View;
		import android.widget.Button;
		import android.widget.EditText;
		import android.widget.Toast;
		import br.unb.cic.reminders.controller.Controller;
		import br.unb.cic.reminders.model.Reminder;
		import br.unb.cic.reminders2.R;

		public class ReminderAddActivity extends Activity {

			private EditText edtReminder, edtDetails;

			private Button btnSave, btnCancel;

			private boolean editingReminder;
			private Long previewReminderId;

			@Override
			public void onCreate(Bundle savedInstanceState) {
				super.onCreate(savedInstanceState);
				setContentView(R.layout.reminder_add);

				Reminder existingReminder = getReminderFromIntent();

				if(existingReminder == null) {
					editingReminder = true;
					Reminder editReminder = getExistingReminder();
					initialize(editReminder);
				}
				else {
					editingReminder = false;
					initialize(existingReminder);
				}

				configureActionListener();

			}

			private void configureActionListener() {
				addListenerToBtnSave();
				addListenerToBtnCancel();
			}

			private void addListenerToBtnSave() {
				btnSave.setOnClickListener(new Button.OnClickListener() {
						public void onClick(View v) {
							try {
								Reminder reminder = createReminder();
								if(editingReminder) {
									reminder.setId(previewReminderId);
									Controller.instance(getApplicationContext()).updateReminder(reminder);
								}
								else {
									Controller.instance(getApplicationContext()).addReminder(reminder);
								}
								finish();
							}
							catch(Exception e) {
								Log.e("ReminderAddActivity", e.getMessage());
								e.printStackTrace();
							}
						}

					});
			}

			private void addListenerToBtnCancel() {
				btnCancel.setOnClickListener(new Button.OnClickListener() {
						public void onClick(View v) {
							finish();
						}
					});
			}


			private void setCreateReminder(Reminder reminder) {
				reminder.setText(edtReminder.getText().toString());
				reminder.setDetails(edtDetails.getText().toString());
			}

			private Reminder getExistingReminder() {
				Reminder reminder = null;

				Intent intent = getIntent();
				String action = intent.getAction();
				String type = intent.getType();

				if(Intent.ACTION_SEND.equals(action) && "text/plain".equals(type)) {
					previewReminderId = intent.getLongExtra("id", 0);
					reminder = new Reminder();

					existingReminderValues(reminder, intent);

					reminder.setId(previewReminderId);
				}

				return reminder;
			}

			private void existingReminderValues(Reminder reminder, Intent intent) {
				String text = intent.getStringExtra("text");
				reminder.setText(text);
			}

			private Reminder getReminderFromIntent() {
				Intent intent = getIntent();
				String action = intent.getAction();
				String type = intent.getType();

				if("br.com.positivo.reminders.ADD_REMINDER".equals(action) &&
					"text/plain".equals(type)) {
					try {

						Reminder reminder = new Reminder();

						createReminderIntent(intent, reminder);

						return reminder;
					}
					catch(InvalidFormatException e) {

					}
				}
				return null;
			}

			private void createReminderIntent(Intent intent, Reminder reminder) {
				String text = intent.getStringExtra("text");
				String details = intent.getStringExtra("details");

				reminder.setText(text);
				reminder.setDetails(details);
			}

			private void initialize(Reminder reminder) {
				try {
					edtReminder = ( EditText ) findViewById(R.id.edtReminder);
					edtDetails = ( EditText ) findViewById(R.id.edtDetails);

					if(reminder != null) {
						updateFieldsFromReminder(reminder);
					}

					btnSave = ( Button ) findViewById(R.id.btnSave);
					btnCancel = ( Button ) findViewById(R.id.btnCancel);
				}
				catch(Exception e) {
					e.printStackTrace();
				}
			}

			private void updateFieldsFromReminder(Reminder reminder) throws Exception {
				edtReminder.setText(reminder.getText());
				edtDetails.setText(reminder.getDetails());
			}
		}
	}

	adds {
		package br.unb.cic.reminders.view;

		import android.content.Intent;
		import android.os.Bundle;
		import br.unb.cic.framework.persistence.DBException;
		import br.unb.cic.reminders.controller.Controller;
		import br.unb.cic.reminders.model.Reminder;

		public class ExternalAddReminderActivity extends ReminderActivity {

			@Override
			protected void onCreate(Bundle savedInstanceState) {
				reminder = new Reminder();
				try {
					setReminderFromIntent();
				}
				catch(Exception e) {
					Intent intent2 = new Intent(getApplicationContext(), AddReminderActivity.class);
					startActivity(intent2);
					finish();
				}
				super.onCreate(savedInstanceState);
			}

			private void setReminderFromIntent() throws Exception {
				Intent intent = getIntent();
				String action = intent.getAction();
				String type = intent.getType();

				if(action.equals("br.com.positivo.reminders.ADD_REMINDER") &&
					"text/plain".equals(type)) {
					reminderFromIntent(intent);
				}
				else {
					reminder = null;
				}
			}

			private void reminderFromIntent(Intent intent) throws Exception {
				String text = intent.getStringExtra("text");
				String details = intent.getStringExtra("details");
				reminder.setText(text);
				reminder.setDetails(details);
			}

			@Override
			protected void initializeValues() {
				if(! reminder.isValid()) return;

				try {
					initialize();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}

			private void initialize() throws Exception {
				edtReminder.setText(reminder.getText());
				edtDetails.setText(reminder.getDetails());
			}

			@Override
			protected void persist(Reminder reminder) {
				persistValues(reminder);
			}

			private void persistValues(Reminder reminder) {
				try {
					Controller.instance(getApplicationContext()).addReminder(reminder);
				}
				catch(DBException e) {
					e.printStackTrace();
				}
			}
		}
	}

	adds {
		package br.unb.cic.reminders.view;

		import br.unb.cic.framework.persistence.DBException;
		import br.unb.cic.reminders.controller.Controller;
		import br.unb.cic.reminders.model.Reminder;

		public class AddReminderActivity extends ReminderActivity {

			@Override
			protected void initializeValues() {
			}

			@Override
			protected void persist(Reminder reminder) {
				try {
					persistValues(reminder);
				}
				catch(Exception e) {
					e.printStackTrace();
				}
			}
			
			private void persistValues(Reminder reminder) {
				try {
					Controller.instance(getApplicationContext()).addReminder(reminder);
				}
				catch(DBException e) {
					e.printStackTrace();
				}
			}
		}

	}
	//#ifdef gui
	modifies br.unb.cic.reminders.view.ReminderActivity {
		adds private void createReminder() {
			try {
				setValuesOnReminder();
			}
			catch(InvalidTextException e) {
				Toast.makeText(getApplicationContext(), "Texto inválido.",
					Toast.LENGTH_SHORT).show();
			}
			catch(InvalidDateException e) {
				Toast.makeText(getApplicationContext(), "Data inválida.",
					Toast.LENGTH_SHORT).show();
			}
			catch(InvalidHourException e) {
				Toast.makeText(getApplicationContext(), "Hora inválida.",
					Toast.LENGTH_SHORT).show();
			}
			catch(Exception e) {
				Toast.makeText(getApplicationContext(), "Erro grave.",
					Toast.LENGTH_SHORT).show();
			}
		}

		adds private void setValuesOnReminder() {
			reminder.setText(edtReminder.getText().toString());
			reminder.setDetails(edtDetails.getText().toString());
		}
	}
	//#endif
}
//#endif
