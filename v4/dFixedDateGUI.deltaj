//#ifdef fixedDate
delta dFixedDateGUI {
	//#ifdef create
	modifies br.unb.cic.reminders.view.ExternalAddReminderActivity {
		modifies initialize() {
			original();
			
			updateSpinnerDateHour(spinnerDate, reminder.getDate());
			updateDateFromString(reminder.getDate());
		}
		
		modifies reminderFromIntent(Intent intent) {
			original(intent);
			
			String date = intent.getStringExtra("date");
			reminder.setDate(date);
		}
	}
	//#endif
	
	//#ifdef gui
	modifies br.unb.cic.reminders.view.ReminderListFragment{
		adds private ListView lvReminderNoDate;
		
		modifies setIntent(Reminder reminder, Intent editIntent){
			original(reminder, editIntent);
			
			editIntent.putExtra("date", reminder.getDate());
			editIntent.putExtra("hour", reminder.getHour());
		}
		
		modifies valuesForRegister(){
			original();
			
			registerForContextMenu(lvReminderNoDate);
		}
		
		modifies createListView(){
			original();
			
			lvReminderNoDate = (ListView) view.findViewById(R.id.lvRemindersNoDate);
		}
	}

	modifies br.unb.cic.reminders.view.ReminderActivity {
		adds protected Calendar date;
		adds protected Spinner spinnerDate;
		adds protected EditText edtDate;

		modifies initializeFields() {
			original();
			
			spinnerDate = getSpinnerDate();
		}

		modifies initializeListeners() {
			original();
			
			addListenerToSpinnerDate();
		}
		
		modifies setValuesOnReminder() {
			original();
			
			reminder.setDate(dateToString());
		}

		adds private String dateToString() {
			if(date == null) return null;
			String sDate;
			sDate = Integer.toString(date.get(Calendar.MONTH) + 1);
			if(date.get(Calendar.MONTH) + 1 < 10) sDate = "0" + sDate;
			sDate = Integer.toString(date.get(Calendar.DAY_OF_MONTH)) + "-" + sDate;
			if(date.get(Calendar.DAY_OF_MONTH) < 10) sDate = "0" + sDate;
			sDate += "-" + Integer.toString(date.get(Calendar.YEAR));
			return sDate;
		}

		adds protected void updateDateFromString(String sDate) {
			if(sDate == null || sDate.equals("")) {
				date = null;
				return;
			}
			char sDay [] = {
				sDate.charAt(0), sDate.charAt(1)
			};
			int day = Integer.parseInt(new String(sDay), 10);
			char sMonth [] = {
				sDate.charAt(3), sDate.charAt(4)
			};
			int month = Integer.parseInt(new String(sMonth), 10);
			char sYear [] = {
				sDate.charAt(6), sDate.charAt(7), sDate.charAt(8), sDate.charAt(9)
			};
			int year = Integer.parseInt(new String(sYear), 10);
			if(date == null) date = Calendar.getInstance();
			date.set(year, month - 1, day);
		}

		adds private Spinner getSpinnerDate() {
			Spinner spinner = ( Spinner ) findViewById(R.id.spinnerDate);

			SpinnerAdapterGenerator<String> adapterDateGenerator = new
			SpinnerAdapterGenerator<String>();

			List<String> items = new ArrayList<String>();
			items.add("No date");
			items.add("+ Select");

			spinner.setAdapter(adapterDateGenerator.getSpinnerAdapter(items, this));

			return spinner;
		}
		
		adds private void addListenerToSpinnerDate() {
			spinnerDate.setOnTouchListener(new View.OnTouchListener() {
					public boolean onTouch(View v, MotionEvent event) {
						spinnerDate = getSpinnerDate();
						return false;
					}
				});

			spinnerDate.setOnKeyListener(new View.OnKeyListener() {
					public boolean onKey(View v, int keyCode, KeyEvent event) {
						spinnerDate = getSpinnerDate();
						return false;
					}
				});

			spinnerDate.setOnItemSelectedListener(new OnItemSelectedListener() {

					public void onItemSelected(AdapterView<? extends Object> parent, View
						view, int pos, long id) {

						switch(pos) {
							case 0 : date = null;
							break;
							case 1 : if(date == null) date = Calendar.getInstance();
							DialogFragment newFragment = new DatePickerDialogFragment(date,
								spinnerDate);
							newFragment.show(getFragmentManager(), "datePicker");
							break;
							default :
						}
					}

					public void onNothingSelected(AdapterView<? extends Object> arg0) {

					}

				});
		}
	}
	//#endif

	adds {
		package br.unb.cic.reminders.view;

		import java.util.Calendar;

		import android.app.DatePickerDialog;
		import android.app.Dialog;
		import android.app.DialogFragment;
		import android.content.DialogInterface;
		import android.os.Bundle;
		import android.widget.ArrayAdapter;
		import android.widget.DatePicker;
		import android.widget.Spinner;

		class DatePickerDialogFragment extends DialogFragment implements
		DatePickerDialog.OnDateSetListener {

			private Calendar date;
			private Spinner spinnerDate;

			private int pYear;
			private int pDay;
			private int pMonth;

			public DatePickerDialogFragment(Calendar date, Spinner spinnerDate) {
				this.date = date;
				this.spinnerDate = spinnerDate;
			}

			@Override
			public Dialog onCreateDialog(Bundle savedInstanceState) {
				int year = date.get(Calendar.YEAR);
				int month = date.get(Calendar.MONTH);
				int day = date.get(Calendar.DAY_OF_MONTH);

				return new DatePickerDialog(getActivity(), this, year, month, day);
			}

			@SuppressWarnings("unchecked")
			@Override
			public void onDismiss(DialogInterface dialog) {
				date.set(pYear, pMonth, pDay);
				String sDate = Integer.toString(pDay) + "-" + Integer.toString(pMonth + 1)
				+ "-" + Integer.toString(pYear);

				ArrayAdapter<String> adapter = ( ArrayAdapter<String> )
				spinnerDate.getAdapter();

				adapter.add(sDate);
				spinnerDate.setSelection(2);

				super.onDismiss(dialog);
			}

			public void onDateSet(DatePicker view, int year, int month, int day) {
				pYear = year;
				pDay = day;
				pMonth = month;
			}

		}
	}

	//#ifdef gui
	modifies br.unb.cic.reminders.view.ReminderArrayAdapter {
		adds public static final int NO_DATE = 3;
		
		modifies view(int position, LinearLayout reminderRow){
			original(position, reminderRow);
			
			TextView tvDateFirst = (TextView)reminderRow.findViewById(R.id.txtDateFirst);
			TextView tvDateSecond = (TextView)reminderRow.findViewById(R.id.txtDateSecond);
			tvDateFirst.setTextColor(rowColor);
			tvDateFirst.setText(getDateFirst(position));
			tvDateSecond.setTextColor(rowColor);
			tvDateSecond.setText(getDateSecond(position));
		}
		
		adds private String getDateFirst(int position) {
			if(getItem(position).getDate() == null) {
				return "";
			}

			String months[] = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
			String week[] = { "", "SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT" };

			Calendar today = Calendar.getInstance();
			GregorianCalendar thatDay = new GregorianCalendar();
			thatDay.set(Integer.parseInt(getItem(position).getDate().substring(6, 10)),
				Integer.parseInt(getItem(position).getDate().substring(3, 5)) - 1,
				Integer.parseInt(getItem(position).getDate().substring(0, 2)));

			switch(rowType) {
				case LATE : long diff = today.getTimeInMillis() -
				thatDay.getTimeInMillis();
				long days = diff /(24*60*60*1000);
				if(days == 1) return "Yesterday";
				else return days + " days ago";

				case TODAY : return getDatesHour(position);

				case NEXT_DAYS : diff = thatDay.getTimeInMillis() -
				today.getTimeInMillis();
				days = diff /(24*60*60*1000);

				if(days == 1) {
					return getDatesHour(position);
				}
				else if(days < 6) {
					return week[thatDay.get(Calendar.DAY_OF_WEEK)];
				}
				else {
					return thatDay.get(Calendar.DAY_OF_MONTH) + " " +
					months[thatDay.get(Calendar.MONTH)];
				}

				default : break;
			}

			return getItem(position).getDate();

		}

		adds private String getDateSecond(int position) {
			switch(rowType) {
				case LATE : return getDatesHour(position);
				case TODAY : return "today";
				case NEXT_DAYS : Calendar today = Calendar.getInstance();
				GregorianCalendar thatDay = new GregorianCalendar();
				thatDay.set(Integer.parseInt(getItem(position).getDate().substring(6, 10)),
					Integer.parseInt(getItem(position).getDate().substring(3, 5)) - 1,
					Integer.parseInt(getItem(position).getDate().substring(0, 2)));

				long diff = thatDay.getTimeInMillis() - today.getTimeInMillis();
				long days = diff /(24*60*60*1000);

				if(days == 1) return "tomorrow";
				else return getDatesHour(position);
				default : break;
			}

			return getItem(position).getHour();
		}
	}
	//#endif

	//#ifdef create
	modifies br.unb.cic.reminders.view.ReminderAddActivity {
		adds private EditText edtDate;

		modifies setCreateReminder(Reminder reminder) {
			original(reminder);
			
			reminder.setDate(edtDate.getText().toString());
		}

		modifies existingReminderValues(Reminder reminder, Intent intent) {
			original(reminder, intent);
			
			String date = intent.getStringExtra("date");
			reminder.setDate(date);
		}
		
		modifies createReminderIntent(Intent intent, Reminder reminder) {
			original(intent, reminder);
			
			String date = intent.getStringExtra("date");
			
			reminder.setDate(date);
		}
		
		modifies updateFieldsFromReminder(Reminder reminder){
			original(reminder);
			
			edtDate.setText(reminder.getDate());
		}
	}
	//#endif

	//#ifdef edit
	modifies br.unb.cic.reminders.view.EditReminderActivity{
		modifies setInitializeValues(Intent intent){
			original(intent);
			
			String date = intent.getStringExtra("date");
	
			updateSpinnerDateHour(spinnerDate, date);
			updateDateFromString(date);
		}
	}
	//#endif
}
//#endif
