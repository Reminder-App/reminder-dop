//#ifdef staticCategory
delta dStaticCategoryController {
	adds {
		package br.unb.cic.reminders.controller;

		import android.content.Context;
		import br.unb.cic.reminders.model.Category;
		import br.unb.cic.reminders.model.Reminder;

		public class CategoryFilter extends ReminderFilter {

			private Category category;

			public CategoryFilter(Category category, Context context) {
				super(context);
				this.category = category;
			}

			@Override
			protected boolean selectReminder(Reminder r) {
				return r.getCategory().getName().equals(category.getName());
			}

			public Category getCategory() {
				return category;
			}

			@Override
			public String getName() {
				return category.getName();
			}

		}
	}
	
	//#ifdef manageReminder
	modifies br.unb.cic.reminders.controller.Controller {
		adds import br.unb.cic.reminders.model.Category;
		
		adds public List<Category> listCategories() throws Exception {
			try {
				return DBFactory.factory(context).createCategoryDAO().listCategories();
			}
			catch(DBException e) {
				throw e;
			}
		}
		
		adds public Category findCategory(Long id) throws Exception {
			return DBFactory.factory(context).createCategoryDAO().findCategoryById(id);
		}
		
		adds public Category findCategory(String name) throws Exception {
			return DBFactory.factory(context).createCategoryDAO().findCategory(name);
		}
		
		adds public List<Reminder> listRemindersByCategory(Category category) throws Exception {
			try {
				return
				DBFactory.factory(context).createReminderDAO().listRemindersByCategory(category);
			}
			catch(DBException e) {
				throw e;
			}
		}
		
		adds public Category getCategory(String name) throws DBException {
			try {
				List<Category> categories =
				DBFactory.factory(context).createCategoryDAO().listCategories();
				for(Category c : categories) {
					if(c.getName().equals(name)) return c;
				}
				return null;
			}
			catch(DBException e) {
				throw e;
			}
		}
	}
	//#endif
}
//#endif
