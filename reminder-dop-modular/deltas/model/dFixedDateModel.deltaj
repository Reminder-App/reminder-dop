delta dFixedDateModel {
	modifies br.unb.cic.reminders.model.Reminder {

		adds @Column(column = "DATE", type = DBTypes.TEXT)
		private String date;

		adds public String getDate() {
			return date;
		}

		adds public void setDate(String date) {
			if(!(date == null || date.equals("")) && ! checkFormat(date,
					Patterns.DATE_PATTERN)) {
				throw new InvalidDateException(date);
			}
			this.date = date;
		}

		modifies isValid() {
			return original() && (date != null);
		}
	}

	modifies br.unb.cic.reminders.model.db.DBConstants {
		adds public static String REMINDER_DATE_COLUMN = "DATE";

		modifies tableStatement() {
			return original() + " DATE CHAR(10) NULL,";
		}
	}

	modifies br.unb.cic.reminders.model.cp.ReminderContentProvider {
		adds public static final String date() {
			return DBConstants.REMINDER_DATE_COLUMN;
		}

		modifies createReminderInsert(ContentValues values) throws DBException {
			Reminder reminder = original(values);
			reminder.setDate(values.getAsString(date()));
			return reminder;
		}

	}

	modifies br.unb.cic.reminders.model.db.DefaultReminderDAO {
		modifies valuesCursorToReminder(Cursor cursor, Reminder reminder) {
			original(cursor, reminder);

			String date =
			cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_DATE_COLUMN));
			reminder.setDate(date);
		}
	}
} 