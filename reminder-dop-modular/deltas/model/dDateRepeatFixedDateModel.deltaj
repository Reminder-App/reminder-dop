delta dDateRepeatFixedDateModel {
	modifies br.unb.cic.reminders.model.Reminder {
		adds import br.unb.cic.reminders.view.InvalidHourException;

		adds @Column(column = "HOUR", type = DBTypes.TEXT)
		private String hour;

		adds public String getHour() {
			return hour;
		}

		adds public void setHour(String hour) {
			if(!(hour == null || hour.equals("")) && ! checkFormat(hour,
					Patterns.HOUR_PATTERN)) {
				throw new InvalidHourException(hour);
			}
			this.hour = hour;
		}

		adds private boolean checkFormat(String date, String pattern) {
			Pattern p = Pattern.compile(pattern);
			Matcher m = p.matcher(date);
			return m.matches();
		}

		modifies isValid() {
			return original() &&(hour != null);
		}
	}

	modifies br.unb.cic.reminders.model.db.DBConstants {
		adds public static String REMINDER_HOUR_COLUMN = "HOUR";

		modifies tableStatement() {
			return original() + " HOUR CHAR(5) NULL,";
		}
	}

	modifies br.unb.cic.reminders.model.cp.ReminderContentProvider {
		adds public static final String hour() {
			return DBConstants.REMINDER_HOUR_COLUMN;
		}

		modifies createReminderInsert(ContentValues values) throws DBException {
			Reminder reminder = original(values);
			reminder.setHour(values.getAsString(hour()));
			return reminder;
		}
	}

	modifies br.unb.cic.reminders.model.db.DefaultReminderDAO {
		modifies valuesCursorToReminder(Cursor cursor, Reminder reminder) {
			original(cursor, reminder);

			String hour =
			cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_HOUR_COLUMN));
			reminder.setHour(hour);
		}
	}
}