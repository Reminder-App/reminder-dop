//#ifdef staticCategory
delta dStaticCategoryModel {
	adds {
		package br.unb.cic.reminders.model.db;

		import java.util.List;

		import br.unb.cic.framework.persistence.DBException;
		import br.unb.cic.reminders.model.Category;

		public interface CategoryDAO {

			public List<Category> listCategories() throws DBException;

			public Category findCategory(String name) throws DBException;

			public Category findCategoryById(Long id) throws DBException;
		}
	}

	adds {
		package br.unb.cic.reminders.model.db;

		import java.util.ArrayList;
		import java.util.List;

		import android.content.Context;
		import android.database.Cursor;
		import android.database.sqlite.SQLiteException;
		import android.util.Log;
		import br.unb.cic.framework.persistence.DBException;
		import br.unb.cic.framework.persistence.GenericDAO;
		import br.unb.cic.reminders.model.Category;

		public class DefaultCategoryDAO extends GenericDAO<Category> implements
		CategoryDAO {

			public DefaultCategoryDAO(Context c) {
				super(c);
			}

			public List<Category> listCategories() throws DBException {
				try {
					db = dbHelper.getReadableDatabase();
					Cursor cursor = db.rawQuery(DBConstants.SELECT_CATEGORIES, null);

					List<Category> categories = new ArrayList<Category>();

					if(cursor.moveToFirst()) {
						do {
							Category category = cursorToCategory(cursor);
							categories.add(category);
						}
						while(cursor.moveToNext());
					}
					cursor.close();
					return categories;
				}
				catch(SQLiteException e) {
					Log.e(DefaultCategoryDAO.class.getCanonicalName(),
						e.getLocalizedMessage());
					throw new DBException();
				}
				finally {
					db.close();
					dbHelper.close();
				}
			}

			public Category findCategory(String name) throws DBException {
				try {
					db = dbHelper.getReadableDatabase();
					Cursor cursor = db.rawQuery(DBConstants.SELECT_CATEGORY_BY_NAME, new
						String [] {
							name
						});

					return returnUniqueCategory(cursor);
				}
				catch(SQLiteException e) {
					Log.e(DefaultCategoryDAO.class.getCanonicalName(),
						e.getLocalizedMessage());
					throw new DBException();
				}
				finally {
					db.close();
					dbHelper.close();
				}
			}

			public Category findCategoryById(Long id) throws DBException {
				try {
					db = dbHelper.getReadableDatabase();
					Cursor cursor = db.rawQuery(DBConstants.SELECT_CATEGORY_BY_ID, new String
						[] {
							id.toString()
						});

					return returnUniqueCategory(cursor);
				}
				catch(SQLiteException e) {
					Log.e(DefaultCategoryDAO.class.getCanonicalName(),
						e.getLocalizedMessage());
					throw new DBException();
				}
				finally {
					db.close();
					dbHelper.close();
				}
			}

			private Category returnUniqueCategory(Cursor cursor) {
				List<Category> categories = new ArrayList<Category>();

				if(cursor.moveToFirst()) {
					Category category = cursorToCategory(cursor);
					categories.add(category);
					cursor.close();
					return categories.get(0);
				}
				return null;
			}

			private Category cursorToCategory(Cursor cursor) {
				Long pk =
				cursor.getLong(cursor.getColumnIndex(DBConstants.CATEGORY_PK_COLUMN));
				String name =
				cursor.getString(cursor.getColumnIndex(DBConstants.CATEGORY_NAME_COLUMN));

				Category category = new Category();
				category.setName(name);
				category.setId(pk);

				return category;
			}
		}
	}

	adds {
		package br.unb.cic.reminders.model;

		import br.unb.cic.framework.persistence.DBTypes;
		import br.unb.cic.framework.persistence.annotations.Column;
		import br.unb.cic.framework.persistence.annotations.Entity;

		@Entity(table = "CATEGORY")
		public class Category {
			@Column(column = "PK", type = DBTypes.LONG, primaryKey = true)
			private Long id;

			@Column(column = "NAME", type = DBTypes.TEXT)
			private String name;

			@Column(column = "LOCKED", type = DBTypes.INT)
			private int locked;

			public Category() {
			}

			public Category(Long id, String name) {
				this.id = id;
				this.name = name;
				this.locked = 0;
			}

			public Category(Long id, String name, int locked) {
				this.id = id;
				this.name = name;
				this.locked = locked;
			}

			public Long getId() {
				return id;
			}

			public void setId(Long id) {
				this.id = id;
			}

			public String getName() {
				return name;
			}

			public void setName(String name) {
				if(name.isEmpty() == true) throw new InvalidTextException(name);
				else this.name = name;
			}

			public int getLocked() {
				return locked;
			}

			public void setLocked(int locked) {
				this.locked = locked;
			}

			@Override
			public String toString() {
				return name;
			}
		}
	}
	
	//#ifdef manageReminder
	modifies br.unb.cic.reminders.model.db.DBConstants {
		removes CREATE_TABLE_STATEMENTS;
		adds public static String CREATE_TABLE_STATEMENTS [] = {"CREATE TABLE CATEGORY("
			+ "PK INTEGER PRIMARY KEY AUTOINCREMENT, " + "NAME VARCHAR(50) NOT NULL, " + "LOCKED INT NOT NULL);",
			
			"CREATE TABLE REMINDER ( " + tableStatement() + "TEXT VARCHAR(50) NOT NULL,"
			+ "DETAILS VARCHAR(50) NULL);",
		};

		removes DROP_TABLE_STATEMENTS;
		adds public static String DROP_TABLE_STATEMENTS [] = {
			"DROP TABLE IF EXISTS REMINDER", "DROP TABLE IF EXISTS CATEGORY"
		};

		adds public static final String SELECT_CATEGORIES =
		"SELECT PK, NAME FROM CATEGORY";

		adds public static final String SELECT_CATEGORY_BY_NAME =
		"SELECT PK, NAME FROM CATEGORY WHERE NAME = ?";

		adds public static final String SELECT_CATEGORY_BY_ID =
		"SELECT PK, NAME FROM CATEGORY WHERE PK = ?";

		adds public static final String SELECT_REMINDERS_BY_CATEGORY =
		"SELECT * FROM REMINDER WHERE FK_CATEGORY = ?";

		adds public static String DELETE_CATEGORIES =
		"DELETE FROM CATEGORY WHERE PK = ?";

		adds public static final String PREDEFINED_CATEGORIES [] = {
			"INSERT INTO CATEGORY VALUES (NULL,'College',1);",
			"INSERT INTO CATEGORY VALUES (NULL,'Job',1);",
			"INSERT INTO CATEGORY VALUES (NULL,'Personal',1);"
		};

		adds public static String CATEGORY_TABLE = "CATEGORY";
		adds public static String CATEGORY_PK_COLUMN = "PK";
		adds public static String CATEGORY_NAME_COLUMN = "NAME";
		adds public static String CATEGORY_LOCKED_COLUMN = "LOCKED";

		adds public static String REMINDER_FK_CATEGORY_COLUMN = "FK_CATEGORY";

		modifies tableStatement() {
			return original() +
			" FK_CATEGORY INTEGER NOT NULL REFERENCES CATEGORY ON DELETE CASCADE,";
		}
	}

	modifies br.unb.cic.reminders.model.cp.ReminderContentProvider {
		adds import br.unb.cic.reminders.model.Category;

		adds import br.unb.cic.reminders.model.db.CategoryDAO;

		adds public static final String category() {
			return DBConstants.CATEGORY_NAME_COLUMN;
		}

		adds private CategoryDAO cdao;

		modifies onCreate() {
			cdao = DefaultDBFactory.factory(getContext()).createCategoryDAO();
			rdao = DefaultDBFactory.factory(getContext()).createReminderDAO();
			return false;
		}

		adds private Category createCategoryInsert(ContentValues values) throws DBException {
			Category category = cdao.findCategory(values.getAsString(category()));
			return category;
		}
		
		modifies createReminderInsert(ContentValues values) {
			Reminder reminder = original(values);
			Category category = createCategoryInsert(values);
			reminder.setCategory(category);
			return reminder;
		}
	}

	modifies br.unb.cic.reminders.model.db.DBFactory {
		adds public abstract CategoryDAO createCategoryDAO();
	}

	modifies br.unb.cic.reminders.model.Reminder {
		adds import br.unb.cic.framework.persistence.annotations.ForeignKey;

		adds @Column(column = "FK_CATEGORY", type = DBTypes.LONG)
		@ForeignKey(mappedBy = "id")
		private Category category;

		adds public Category getCategory() {
			return category;
		}

		adds public void setCategory(Category category) {
			this.category = category;
		}

		modifies isValid() {
			return original() &&(category != null);
		}
	}

	modifies br.unb.cic.reminders.model.db.ReminderDAO {
		adds import br.unb.cic.reminders.model.Category;
		adds public List<Reminder> listRemindersByCategory(Category category) throws
		DBException;
	}

	modifies br.unb.cic.reminders.model.db.DefaultDBFactory {
		adds @Override
		public CategoryDAO createCategoryDAO() {
			return new DefaultCategoryDAO(context);
		}
	}

	modifies br.unb.cic.reminders.model.db.DefaultReminderDAO {
		adds import br.unb.cic.reminders.model.Category;
		adds import android.util.Log;

		adds public List<Reminder> listRemindersByCategory(Category category) throws
		DBException {
			try {
				db = dbHelper.getReadableDatabase();
				Cursor cursor = db.rawQuery(DBConstants.SELECT_REMINDERS_BY_CATEGORY, new
					String [] {
						category.getId().toString()
					});

				return remindersFromCursor(cursor);
			}
			catch(Exception e) {
				Log.e(DefaultCategoryDAO.class.getCanonicalName(),
					e.getLocalizedMessage());
				throw new DBException();
			}
			finally {
				db.close();
				dbHelper.close();
			}
		}

		modifies valuesCursorToReminder(Cursor cursor, Reminder reminder) throws
		DBException {
			original(cursor, reminder);

			Long categoryId =
			cursor.getLong(cursor.getColumnIndex(DBConstants.REMINDER_FK_CATEGORY_COLUMN));
			Category category;
			try {
				category =
				DBFactory.factory(context).createCategoryDAO().findCategoryById(categoryId);
				reminder.setCategory(category);
			}
			catch(DBException e) {
				e.printStackTrace();
			}
		}
	}

	modifies br.unb.cic.reminders.model.db.DBHelper {
		modifies onCreate(SQLiteDatabase db) {
			try {
				for(String sql : DBConstants.CREATE_TABLE_STATEMENTS) {
					Log.i(DBHelper.class.getCanonicalName(), sql);
					db.execSQL(sql);
				}

				for(String sql : DBConstants.PREDEFINED_CATEGORIES) {
					Log.i(DBHelper.class.getCanonicalName(), sql);
					db.execSQL(sql);
				}
			}
			catch(SQLiteException e) {
				Log.v(DBHelper.class.getName(), e.getMessage());
			}
		}
	}
	//#endif
}
//#endif
